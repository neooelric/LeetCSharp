{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
  // }
  "leetcode solution class":{
    "prefix": "leetcode",
    "body":[
"using System;",
"using System.Collections.Generic;",
"using System.Linq;",
"using System.Text;",
"using Utilities.LeetCodeDefinitions;",
"",
"namespace Solutions._$1",
"{",
"    public class Solution",
"    {",
"        $0",
"    }",
"}"
    ]
  },
  "leetcode unit-test class" : {
    "prefix" : "leetcodetest",
    "body":[
"using System;",
"using System.Collections.Generic;",
"using System.Linq;",
"using System.Text;",
"using Utilities;",
"using Utilities.LeetCodeDefinitions;",
"using Xunit;",
"",
"namespace Tests._$1",
"{",
"    public class TestCase",
"    {",
"        $0",
"",
"        public override string ToString()",
"        {",
"            return string.Format(\"?\");",
"        }",
"",
"        public static List<TestCase> ParseTestCaseFromTextFile(string filePath)",
"        {",
"            string[] fileContent = System.IO.File.ReadAllLines(filePath);",
"",
"            List<TestCase> cases = new List<TestCase>();",
"",
"            for(int i = 0; i < fileContent.Length; ++i)",
"            {",
"                string line = fileContent[i];",
"",
"                switch(i % ?)",
"                {",
"                    case 0:",
"                        cases.Add(new TestCase());",
"                        cases.Last().? = Helper.Parse?(line);",
"                        break;",
"                    case 1:",
"                        cases.Last().? = Helper.Parse?(line);",
"                        break;",
"                    case 2:",
"                        cases.Last().? = Helper.Parse?(line);",
"                        break;",
"                    default:",
"                        break;",
"                }",
"            }",
"",
"            return cases;",
"        }",
"    }",
"",
"    public class Test",
"    {",
"        [Fact]",
"        public void RunTestCases()",
"        {",
"            Solutions._$ProblemNumber$.Solution solution = new Solutions._$1.Solution();",
"",
"            List<TestCase> cases = TestCase.ParseTestCaseFromTextFile(@\"./$1.txt\");",
"",
"            foreach (TestCase c in cases)",
"            {",
"                var result = solution.?(?);",
"",
"                Assert.True(",
"                    Helper.Equals(result, c.Output),",
"                    string.Format("Case:{{{0}}}, Result:{{{1}}}", c, result)",
"                    );",
"            }",
"        }",
"        ",
"    }",
"}",
    ]
  }
}